Resumo: Listas em Python

As listas em Python s√£o estruturas de dados muito vers√°teis que permitem armazenar uma cole√ß√£o de elementos em uma √∫nica vari√°vel. 
S√£o **mut√°veis**, ou seja, podem ser alteradas ap√≥s a sua cria√ß√£o.

--------------------------------------------------
1. Cria√ß√£o de Listas
- Definidas com colchetes []
- Podem conter diferentes tipos de dados

Exemplo:
    frutas = ["ma√ß√£", "banana", "laranja"]
    numeros = [1, 2, 3, 4, 5]

--------------------------------------------------
2. Acesso a Elementos
- Usa √≠ndices, come√ßando do 0
- √çndices negativos acessam do fim para o in√≠cio

Exemplo:
    print(frutas[0])   # ma√ß√£
    print(frutas[-1])  # laranja

--------------------------------------------------
3. Fatiamento (Slicing)
- Permite acessar partes da lista usando [inicio:fim:passo]

Exemplo:
    print(numeros[1:4])   # [2, 3, 4]
    print(numeros[:3])    # [1, 2, 3]
    print(numeros[::-1])  # [5, 4, 3, 2, 1] (invers√£o)

--------------------------------------------------
4. Iterando em Listas
- Podemos percorrer listas com loops

Exemplo:
    for fruta in frutas:
        print(fruta)

--------------------------------------------------
5. M√©todos de Listas
- append(x) ‚Üí adiciona ao final
- insert(i, x) ‚Üí insere em posi√ß√£o espec√≠fica
- remove(x) ‚Üí remove a primeira ocorr√™ncia
- pop([i]) ‚Üí remove e retorna o item (√∫ltimo por padr√£o)
- sort() ‚Üí ordena a lista
- reverse() ‚Üí inverte a lista

Exemplo:
    frutas.append("uva")
    frutas.remove("banana")
    print(frutas)

--------------------------------------------------
6. Opera√ß√µes √∫teis
- len(lista) ‚Üí quantidade de elementos
- in ‚Üí verifica se existe na lista
- + ‚Üí concatena√ß√£o

Exemplo:
    print(len(frutas))        # 3
    print("uva" in frutas)    # True
    nova_lista = frutas + ["melancia"]

--------------------------------------------------
üìå Curiosidades
- Diferente de tuplas, as listas podem ser modificadas.
- Podem conter listas dentro de listas (listas aninhadas).
- S√£o amplamente utilizadas para manipula√ß√£o de dados, cole√ß√µes e itera√ß√µes.
